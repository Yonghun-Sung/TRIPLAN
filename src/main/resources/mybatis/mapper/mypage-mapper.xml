<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.site.triplan.mapper.MypageMapper">
    <select id="getScheduledPlans" resultType="com.site.triplan.vo.PlanVo"><!--나의 일정 : 다가올 일정 (plan_deleted에 있는 일정 제외, 시작일이 현재와 가까운 순 정렬)-->
        SELECT T.code, T.title, T.views, T.write_dt, T.start_dt, T.end_dt
        , T.place_num, T.user_code, T.id, T.nickname, T.name, T.area_engname, T.plan_code
        FROM
        (
        SELECT DISTINCT p.code, p.title, p.views
        , DATE_FORMAT(p.write_dt, '%Y-%m-%d') "write_dt"
        , DATE_FORMAT(p.start_dt, '%Y-%m-%d') "start_dt"
        , DATE_FORMAT(p.end_dt, '%Y-%m-%d') "end_dt"
        , (SELECT count(*) FROM place WHERE plan_code = p.code) "place_num"
        , ui.user_code, ui.id, ui.nickname
        , a.name, a.engname "area_engname"
        , m.plan_code
        , (p.start_dt &gt;= DATE_FORMAT(now(), '%Y-%m-%d')) "isStart"
        FROM plan p
        JOIN user u ON p.user_code = u.code
        JOIN user_info ui ON u.code = ui.user_code
        JOIN area a ON p.area_code = a.code
        JOIN place pl ON p.code = pl.plan_code
        LEFT JOIN mate m ON p.code = m.plan_code
        WHERE p.user_code =#{code} OR m.user_code =#{code}
        AND pl.day = 1 AND pl.`order` = 1 AND start_dt &gt;= DATE(NOW())
        ) T
        WHERE T.isStart = 1
        AND T.code NOT IN (SELECT plan_code FROM plan_deleted)
        ORDER BY T.start_dt
        <!-- &gt;= : >= -->
    </select>
    <select id="getCompletedPlans" resultType="com.site.triplan.vo.PlanVo"> <!--나의 일정 : 완료된 일정 (plan_deleted에 있는 일정 제외, 완료일이 현재와 가까운 순 정렬)-->
        SELECT T.code, T.title, T.views, T.write_dt, T.start_dt, T.end_dt
        , T.place_num, T.user_code, T.id, T.nickname, T.name, T.area_engname, T.plan_code
        FROM
        (
        SELECT DISTINCT p.code, p.title, p.views
        , DATE_FORMAT(p.write_dt, '%Y-%m-%d') "write_dt"
        , DATE_FORMAT(p.start_dt, '%Y-%m-%d') "start_dt"
        , DATE_FORMAT(p.end_dt, '%Y-%m-%d') "end_dt"
        , (SELECT count(*) FROM place WHERE plan_code = p.code) "place_num"
        , ui.user_code, ui.id, ui.nickname
        , a.name, a.engname "area_engname"
        , m.plan_code
        , (p.end_dt &lt;= DATE_FORMAT(now(), '%Y-%m-%d')) "isEnd"
        FROM plan p
        JOIN user u ON p.user_code = u.code
        JOIN user_info ui ON u.code = ui.user_code
        JOIN area a ON p.area_code = a.code
        JOIN place pl ON p.code = pl.plan_code
        LEFT JOIN mate m ON p.code = m.plan_code
        WHERE p.user_code =#{code} OR m.user_code =#{code}
        AND pl.day = 1 AND pl.`order` = 1 AND end_dt &lt;= DATE(NOW())
        ) T
        WHERE T.isEnd = 1
        AND T.code NOT IN (SELECT plan_code FROM plan_deleted)
        ORDER BY T.end_dt DESC
        <!--&lt;= : <= -->
    </select>
    <select id="getAllReplies" resultType="com.site.triplan.vo.ReplyVo"><!--나의 댓글: 삭제된 일정의 댓글 제외, 신고 승인된 댓글 제외-->
        SELECT r.code, r.content, DATE_FORMAT(r.write_dt, '%Y-%m-%d') "write_dt", p.title, a.name, p.code "plan_code"
        FROM reply r
        JOIN plan p ON r.plan_code = p.code
        JOIN area a ON p.area_code = a.code
        LEFT JOIN report_reg rr ON r.code = rr.reply_code
        LEFT JOIN report_proc rp ON rr.code = rp.reg_code
        WHERE r.user_code=#{code}
        AND (rr.code IS NULL OR rp.result_code = 2)
        AND p.code NOT IN (SELECT plan_code FROM plan_deleted)
        ORDER BY r.write_dt DESC
    </select>
    <select id="getAllLikePlans" resultType="com.site.triplan.vo.PlanVo"><!--좋아요한 일정-->
        SELECT a.name, a.engname "area_engname", p.title, ui.nickname, p.views, DATE_FORMAT(p.start_dt, '%Y-%m-%d') "start_dt"
        , DATE_FORMAT(p.end_dt, '%Y-%m-%d') "end_dt", pl.photo_path, p.code, (SELECT count(*)
        FROM place WHERE plan_code = p.code) "place_num" FROM `like` l
        JOIN plan p ON l.plan_code = p.code
        JOIN user u ON p.user_code = u.code
        JOIN user_info ui ON u.code = ui.user_code
        JOIN area a ON p.area_code = a.code
        JOIN place pl ON p.code = pl.plan_code
        WHERE l.user_code=#{code} AND pl.day = 1 AND pl.order = 1
        ORDER BY l.dt DESC
    </select>
    <select id="getUserProfile" resultType="com.site.triplan.vo.UserVo"><!--프로필: 이메일, 이름, 닉네임, 패스워드, 유저코드-->
        SELECT id, name, nickname, pw, user_code FROM user_info
        WHERE id=#{id}
    </select>
    <select id="getPlanCount" resultType="Integer"><!--나의 일정 개수 : plan_deleted에 있는 일정 제외한 개수-->
        SELECT IFNULL(count(*), 0) + IFNULL((SELECT count(*) FROM mate WHERE user_code =#{code}), 0) "countAll"
        FROM plan WHERE user_code =#{code}
        AND code NOT IN (SELECT plan_code FROM plan_deleted);
    </select>
    <select id="getReplyCount" resultType="Integer"><!--나의 댓글 개수 : 삭제된 일정에 있는 댓글 , 신고승인된 댓글 제외한 개수-->
        SELECT COUNT(*) FROM reply r
        JOIN plan p ON r.plan_code = p.code
        LEFT JOIN report_reg rr ON r.code = rr.reply_code
        LEFT JOIN report_proc rp ON rr.code = rp.reg_code
        WHERE r.user_code =#{code}
        AND (rr.code IS NULL OR rp.result_code = 2)
        AND p.code NOT IN (SELECT plan_code FROM plan_deleted);
    </select>
    <select id="getLikeCount" resultType="Integer"><!--좋아요한 일정 갯수-->
        SELECT COUNT(*) FROM `like`
        WHERE `like`.user_code=#{code}
    </select>
    <update id="updateTitle"><!--여행제목 변경: plan.code로 찾기 -->
        UPDATE plan
        SET title=#{title}
        where code=#{code}
    </update>
    <insert id="deletePlans"><!--일정삭제: plan_deleted에 그 일정code를 insert-->
        INSERT INTO plan_deleted(plan_code) VALUES (#{code})<!--plan.code-->
    </insert>
    <delete id="deleteReply"><!--나의 댓글 삭제-->
        DELETE FROM reply WHERE code=#{reply_code} AND user_code=#{code}
    </delete>
    <delete id="deleteLike"><!--좋아요한 일정 삭제-->
        DELETE FROM `like` WHERE plan_code=#{plan_code} AND user_code=#{code}
    </delete>
    <update id="updateUser"><!--회원정보 수정(닉네임, 패스워드) : id로 찾기-->
        UPDATE user_info
        SET nickname=#{nickname}, pw=#{pw}
        WHERE id=#{id}
    </update>
    <insert id="userToDropTbl" parameterType="com.site.triplan.vo.UserVo"> <!--회원 탈퇴 -> drop테이블에 insert-->
        INSERT INTO `drop` (id, name, nickname, user_code) VALUES (#{id}, #{name}, #{nickname}, #{user_code})
    </insert>
    <select id="searchMate" resultType="com.site.triplan.vo.UserVo"><!--동행자 검색 : 입력받은 회원 id로 찾기-->
        SELECT id, name, nickname, user_code FROM user_info
        WHERE id =#{mateEmail}
    </select>
    <insert id="addMate" parameterType="com.site.triplan.vo.PlanVo"> <!--동행자 추가 : mate테이블에 plan_code, user_code(동행자로 추가당한 회원 코드)넣어줌-->
        INSERT INTO mate(plan_code, user_code) VALUES (#{plan_code}, #{user_code})
    </insert>
</mapper>